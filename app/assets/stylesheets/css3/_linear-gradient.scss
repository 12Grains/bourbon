@mixin linear-gradient($pos, $G1, $G2: false,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
     $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
    $pos: top; // Default position
  }

  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);

  background-color:  nth($G1, 1);
  background-image:     deprecated-webkit-gradient($full); // Safari <= 5.0
  background-image:  -webkit-linear-gradient($pos, $full); // Safari 5.1+, Chrome
  background-image:     -moz-linear-gradient($pos, $full);
  background-image:      -ms-linear-gradient($pos, $full);
  background-image:       -o-linear-gradient($pos, $full);
  background-image: unquote("linear-gradient(#{$pos}, #{$full})");
}

// Render Deprecated Webkit Gradient
//************************************************************************//
@function deprecated-webkit-gradient($full) {
  $gradient-list: ();
  $gradient: false;

  @if length($full) > 2 {
    @each $gradient in $full {
      @if length($gradient) == 2 {
        $color-stop: color-stop(join(nth($gradient, 2), nth($gradient, 1), comma));
        $gradient-list: join($gradient-list, $color-stop, comma);
      }
      @else {
        $color-stop: color-stop($gradient);
        $gradient-list: join($gradient-list, $color-stop, comma);
        @warn "When defining more 3 or more color-stops, you must define stop values. (e.g. red 0%, orange 50%, pink 75%)"
      }
    }
    $gradient: -webkit-gradient(linear, left top, left bottom, $gradient-list);
  }

  @else if length($full) == 2 {
    @each $gradient in $full {
      @if length($gradient) == 2 {
        $color-stop: color-stop(join(nth($gradient, 2), nth($gradient, 1), comma));
        $gradient-list: join($gradient-list, $color-stop, comma);
      }
      @else {
        @if $gradient == nth($full, 1) {
          $color-stop: from($gradient);
          $gradient-list: join($gradient-list, $color-stop, comma);
        }
        @else if $gradient == nth($full, 2) {
          $color-stop: to($gradient);
          $gradient-list: join($gradient-list, $color-stop, comma);
        }
      }
    }
    $gradient: -webkit-gradient(linear, left top, left bottom, $gradient-list);
  }
  @return $gradient;
}

// Usage: Gradient position is optional, default is top. Position can be a degree. Color stops are optional as well.
// @include linear-gradient(#1e5799, #2989d8);
// @include linear-gradient(top, #1e5799 0%, #2989d8 50%);
// @include linear-gradient(50deg, rgba(10, 10, 10, 0.5) 0%, #2989d8 50%, #207cca 51%, #7db9e8 100%);

